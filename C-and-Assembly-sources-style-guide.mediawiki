(_Note:_ The word "must" indicates a requirement.  The word "should" indicates a recomendation.)

==== All Sources ====

* TAB characters must be expanded to spaces.
* All text files must end with new-line characters.  Don't leave the last line "dangling".
* 80 characters is the desired maximum width of files.  But, it isn't a "strong" rule; sometimes, you will want to type longer lines, in order to keep the parts of expressions
or comments together on the same line.
* You should avoid typing non-ASCII characters.
* If you change "normal" source code into comments, then you must add a comment about why that code is a comment.
* When you want to create a comment from several lines of code, you should use preprocessor lines, instead of `/* */` or "`;`".  Example:

 ````C
 #if 0
     one ();
     two ();
     three = two () + one ();
 #endif
 ````

==== C Sources ====

* Your files should obey the C89 standard.
* All declarations in a block must be at the beginning of that block.
* You should put a blank line between a list of local variable declarations and the first line of code.
* You must use ANSI C comments (`/* */`); you must not use C++ comments (`//`).
* The normal indentation width should be four spaces.
* When a function's argument list wraps around to a next line, you should indent that next line by either the normal width or enough spaces to align it with the arguments on the previous line.
* When you add functions to an existimg file, you should separate them by the same number of blank lines that separate the functions that already are in that file.

(The next two rules will be changed at some time in the future; but, for now:)

* You must separate function names and parameter/argument lists by one space.
* When declaring/defining pointers, you must put the asterisk (`*`) next to the data type, with a space between it and the variable's name.  Examples:

 ````C
    int* namedPtr[5];
    char* nextLine (FILE* f);
 ````

==== Assembly Sources ====

* Op-code mnemonics must have lower-case letters.  The names of instruction macroes may have upper-case letters.
* Hexadecimal number constants should be used except where decimal or binary numbers make much more sense in that constant's context.
* Hexadecimal letters should be upper-case.
* When you set two registers or two memory locations to an immediate 16-bit zero, you should use the expressions `#<$0000` and `#>$0000` (they make it obvious where you are putting the
lower and upper bytes).
* If a function is declared to return a char-sized value, it actually must return an integer-sized value.  (When cc65 promotes a returned value, it sometimes assumes that the
value already is an integer.)
* Functions, that are intended for a platform's system library, should be optimized as much as possible.
* Sometimes, there must be a trade-off between size and speed.  If you think that a library function won't be used often, then you should make it small.  Otherwise, you should
make it fast.
* Comments that are put on the right side of instructions must be aligned (start in the same character columns).
* Assembly source fields (label, operation, operand, comment) should start _after_ character columns that are multiples of eight (such as 1, 9, 17, 33, and 41).
